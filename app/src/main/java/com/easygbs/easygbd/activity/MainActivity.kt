package com.easygbs.easygbd.activityimport android.Manifestimport android.graphics.Typefaceimport android.os.*import android.util.Logimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.widget.LinearLayoutimport android.widget.Toastimport androidx.databinding.DataBindingUtilimport androidx.fragment.app.Fragmentimport androidx.fragment.app.FragmentManagerimport androidx.fragment.app.FragmentTransactionimport com.easygbs.easygbd.Rimport com.easygbs.easygbd.application.Appimport com.easygbs.easygbd.common.Constantimport com.easygbs.easygbd.dao.DConimport com.easygbs.easygbd.dao.DOpeimport com.easygbs.easygbd.dao.bean.Chanimport com.easygbs.easygbd.databinding.ActivityMainBindingimport com.easygbs.easygbd.fragment.*import com.easygbs.easygbd.push.MediaStreamimport com.easygbs.easygbd.push.PushCallbackimport com.easygbs.easygbd.util.PeUtilimport com.easygbs.easygbd.util.SPHelperimport com.easygbs.easygbd.util.ScrUtilimport com.easygbs.easygbd.viewmodel.activity.MainViewModelimport com.gyf.immersionbar.ImmersionBarimport org.easydarwin.bus.StartRecordimport org.easydarwin.bus.StopRecordimport org.greenrobot.eventbus.EventBusimport org.greenrobot.eventbus.Subscribeimport org.greenrobot.eventbus.ThreadModeimport pub.devrel.easypermissions.EasyPermissionsimport java.io.Fileclass MainActivity : BaseActivity(), EasyPermissions.PermissionCallbacks {    var TAG: String = MainActivity::class.java.getSimpleName()    var mSPHelper: SPHelper?=null    var mActivityMainlandBinding: ActivityMainBinding? = null    lateinit var mMainViewModel: MainViewModel    var mFragmentManager: FragmentManager?=null    var mFragmentTransaction: FragmentTransaction?=null    var mBasicSettingsFragment: BasicSettingsFragment?=null    var mStreamingSettingsFragment:StreamingSettingsFragment?=null    var mChannelSettingsFragment:ChannelSettingsFragment?=null    var mAboutFragment:AboutFragment?=null    var curfrag:Fragment?=null    var lastfrag:Fragment?=null    var selectTop:Int=0    var selectAbout:Int=0    var mDOpe: DOpe? = null    var width: Int = 0    var height: Int = 0    var mHandler: Handler = object : Handler() {        override fun  handleMessage(msg: Message) {            super.handleMessage(msg)            when (msg.what) {                Constant.TOINIT -> Dir()                Constant.DATA -> Data()                Constant.REQUESTPER -> {                    var per:Boolean= PeUtil.hasPermission(this@MainActivity,Manifest.permission.WRITE_EXTERNAL_STORAGE)                    if(!per){                        PeUtil.requestPer(this@MainActivity, PeUtil.STORAGE)                    }else{                        Send(Constant.TOINIT, "")                    }                }            }        }    }    override fun init() {        mActivityMainlandBinding = DataBindingUtil.setContentView(this@MainActivity, R.layout.activity_main)        EventBus.getDefault().register(this)        val mWindowManager: WindowManager = this@MainActivity.getWindowManager()        val mDisplay = mWindowManager.defaultDisplay        width = mDisplay.width        height = mDisplay.height        mFragmentManager = getSupportFragmentManager()        mFragmentTransaction = mFragmentManager!!.beginTransaction()        mBasicSettingsFragment = BasicSettingsFragment()        mStreamingSettingsFragment = StreamingSettingsFragment()        mChannelSettingsFragment = ChannelSettingsFragment()        mAboutFragment=AboutFragment();        mFragmentTransaction!!.add(R.id.llcontent, mBasicSettingsFragment!!)        mFragmentTransaction!!.add(R.id.llcontent, mStreamingSettingsFragment!!)        mFragmentTransaction!!.add(R.id.llcontent, mChannelSettingsFragment!!)        mFragmentTransaction!!.add(R.id.llcontent, mAboutFragment!!)        curfrag = mBasicSettingsFragment        mFragmentTransaction!!.show(mBasicSettingsFragment!!)        mFragmentTransaction!!.hide(mStreamingSettingsFragment!!)        mFragmentTransaction!!.hide(mChannelSettingsFragment!!)        mFragmentTransaction!!.hide(mAboutFragment!!)        mFragmentTransaction!!.commit()        mHandler.sendEmptyMessage(Constant.REQUESTPER)        mMainViewModel= MainViewModel(App.getInstance())        mMainViewModel.setMainActivity(this@MainActivity)        mActivityMainlandBinding!!.mMainViewModel=mMainViewModel        ImmersionBar.with(this).statusBarDarkFont(true).init()        val layoutParams = mActivityMainlandBinding!!.lltop.layoutParams as LinearLayout.LayoutParams        layoutParams.topMargin = ScrUtil.getStatusBarHeight(this@MainActivity)        mActivityMainlandBinding!!.lltop.layoutParams = layoutParams        mMainViewModel!!.run {            selectTopItem.observe(this@MainActivity) {                Log.i(TAG,"selectTopItem  it  "+it+"  "+Thread.currentThread().name)                if(selectTop==it){                    Log.i(TAG,"selectTopItem  一样")                    return@observe                }                selectTop=it                mFragmentTransaction = mFragmentManager!!.beginTransaction()                mFragmentTransaction!!.hide(curfrag!!)                when (it) {                    0 -> {                        mActivityMainlandBinding!!.tvtopfrist.setTextSize(15f)                        mActivityMainlandBinding!!.tvtopfrist.typeface= Typeface.DEFAULT_BOLD                        mActivityMainlandBinding!!.vtopfirst.visibility= View.VISIBLE                        mActivityMainlandBinding!!.tvtopsecond.setTextSize(14f)                        mActivityMainlandBinding!!.tvtopsecond.typeface= Typeface.DEFAULT                        mActivityMainlandBinding!!.vtopsecond.visibility= View.INVISIBLE                        mActivityMainlandBinding!!.tvtopthird.setTextSize(14f)                        mActivityMainlandBinding!!.tvtopthird.typeface= Typeface.DEFAULT                        mActivityMainlandBinding!!.vtopthird.visibility= View.INVISIBLE                        isshowbottomObservableField.set(true)                        curfrag=mBasicSettingsFragment                        mFragmentTransaction!!.show(mBasicSettingsFragment!!)                    }                    1 -> {                        mActivityMainlandBinding!!.tvtopfrist.setTextSize(14f)                        mActivityMainlandBinding!!.tvtopfrist.typeface= Typeface.DEFAULT                        mActivityMainlandBinding!!.vtopfirst.visibility= View.INVISIBLE                        mActivityMainlandBinding!!.tvtopsecond.setTextSize(15f)                        mActivityMainlandBinding!!.tvtopsecond.typeface= Typeface.DEFAULT_BOLD                        mActivityMainlandBinding!!.vtopsecond.visibility= View.VISIBLE                        mActivityMainlandBinding!!.tvtopthird.setTextSize(14f)                        mActivityMainlandBinding!!.tvtopthird.typeface= Typeface.DEFAULT                        mActivityMainlandBinding!!.vtopthird.visibility= View.INVISIBLE                        isshowbottomObservableField.set(false)                        curfrag=mStreamingSettingsFragment                        mFragmentTransaction!!.show(mStreamingSettingsFragment!!)                    }                    2 -> {                        mActivityMainlandBinding!!.tvtopfrist.setTextSize(14f)                        mActivityMainlandBinding!!.tvtopfrist.typeface= Typeface.DEFAULT                        mActivityMainlandBinding!!.vtopfirst.visibility= View.INVISIBLE                        mActivityMainlandBinding!!.tvtopsecond.setTextSize(14f)                        mActivityMainlandBinding!!.tvtopsecond.typeface= Typeface.DEFAULT                        mActivityMainlandBinding!!.vtopsecond.visibility= View.INVISIBLE                        mActivityMainlandBinding!!.tvtopthird.setTextSize(15f)                        mActivityMainlandBinding!!.tvtopthird.typeface= Typeface.DEFAULT_BOLD                        mActivityMainlandBinding!!.vtopthird.visibility= View.VISIBLE                        isshowbottomObservableField.set(false)                        curfrag=mChannelSettingsFragment                        mFragmentTransaction!!.show(mChannelSettingsFragment!!)                    }                }                mFragmentTransaction!!.commit()            }        }        mMainViewModel!!.run {            selectBottomItem.observe(this@MainActivity) {                Log.i(TAG,"selectBottomItem  it  "+it)                when (it) {                    0 -> {                        try{                        var mMediaStream:MediaStream=mMainActivity!!.mBasicSettingsFragment!!.mMediaStream!!                        if (mMediaStream != null) {                            if (!mMediaStream.isStreaming()) {                                mActivityMainlandBinding!!.ivbottomfirst.setBackgroundResource(R.mipmap.ic_reg)                                mActivityMainlandBinding!!.tvbottomfirst.setTextColor(                                    this@MainActivity.resources.getColor(                                        R.color.color_01c9a7                                    )                                )                            }else{                                mActivityMainlandBinding!!.ivbottomfirst.setBackgroundResource(R.drawable.ic_unreg)                                mActivityMainlandBinding!!.tvbottomfirst.setTextColor(this@MainActivity.resources.getColor(R.color.color_808080))                            }                        } else {                            mActivityMainlandBinding!!.ivbottomfirst.setBackgroundResource(R.drawable.ic_unreg)                            mActivityMainlandBinding!!.tvbottomfirst.setTextColor(this@MainActivity.resources.getColor(R.color.color_808080))                        }                            mFragmentTransaction = mFragmentManager!!.beginTransaction()                            mFragmentTransaction!!.hide(curfrag!!)                            curfrag=mBasicSettingsFragment                            mFragmentTransaction!!.show(mBasicSettingsFragment!!)                            mFragmentTransaction!!.commit()                            mActivityMainlandBinding!!.lltop.visibility=View.VISIBLE                            selectAbout=0                            mActivityMainlandBinding!!.ivbottomthird.setBackgroundResource(R.drawable.ic_notselectabout)                            mActivityMainlandBinding!!.tvbottomthird.setTextColor(this@MainActivity.resources.getColor(R.color.color_808080))                        }catch(e:Exception){                            Log.e(TAG,"selectBottomItem 0  Exception  "+e.toString())                        }                    }                    1 -> {                        var mMediaStream: MediaStream =mMainActivity!!.mBasicSettingsFragment!!.mMediaStream                        if (mMediaStream != null) {                            val isRecording: Boolean = mMediaStream.isRecording()                            if (isRecording) {                                mActivityMainlandBinding!!.ivbottomsecond.setBackgroundResource(R.drawable.ic_notselectrec)                                mActivityMainlandBinding!!.tvbottomsecond.setTextColor(this@MainActivity.resources.getColor(R.color.color_808080))                            } else {                                mActivityMainlandBinding!!.ivbottomsecond.setBackgroundResource(R.drawable.ic_selectrec)                                mActivityMainlandBinding!!.tvbottomsecond.setTextColor(this@MainActivity.resources.getColor(R.color.color_01c9a7))                            }                        }                    }                    2 -> {                        about()                       }                }            }        }    }    fun about(){        if(selectAbout==0){            selectAbout=1            mActivityMainlandBinding!!.ivbottomthird.setBackgroundResource(R.drawable.ic_selectabout)            mActivityMainlandBinding!!.tvbottomthird.setTextColor(this@MainActivity.resources.getColor(R.color.color_01c9a7))            mFragmentTransaction = mFragmentManager!!.beginTransaction()            mFragmentTransaction!!.hide(curfrag!!)            lastfrag=curfrag            curfrag=mAboutFragment            mFragmentTransaction!!.show(mAboutFragment!!)            mFragmentTransaction!!.commit()            mActivityMainlandBinding!!.lltop.visibility=View.GONE            mAboutFragment!!.show()        }else{            selectAbout=0            mActivityMainlandBinding!!.ivbottomthird.setBackgroundResource(R.drawable.ic_notselectabout)            mActivityMainlandBinding!!.tvbottomthird.setTextColor(this@MainActivity.resources.getColor(R.color.color_808080))            mActivityMainlandBinding!!.lltop.visibility=View.VISIBLE            mFragmentTransaction = mFragmentManager!!.beginTransaction()            mFragmentTransaction!!.hide(curfrag!!)            curfrag=lastfrag            mFragmentTransaction!!.show(curfrag!!)            mFragmentTransaction!!.commit()        }    }    fun Data() {        var num: Long = mDOpe!!.OperaDatabase(DCon.Chanqueryct, "") as Long        if (num == 0L) {            val mChan = Chan()            mChan.ec=1            mChan.uid=1            mChan.cid="34020000001310005554"            mChan.na="channel1"            mChan.sta=1            ChanIn(mChan)        }        mChannelSettingsFragment!!.showChannels()    }    fun Chanjudinsert(mChan: Chan?): Boolean {        return mDOpe!!.OperaDatabase(DCon.Chanjudinsert, mChan) as Boolean    }    fun ChanIn(mChan: Chan?): Boolean {        val Chanjudinsert = Chanjudinsert(mChan)        return if (Chanjudinsert) {            inChecChan()            val Chaninsert = mDOpe!!.OperaDatabase(DCon.Chaninsert, mChan) as Boolean            if (!Chaninsert) {                Constant.ChanID--                mSPHelper!!.put("chanid", Constant.ChanID.toString())                if (Constant.ChanID == Constant.ChanM) {                    Constant.ChanF = 1                    mSPHelper!!.put("chanf", Constant.ChanF.toString())                    Constant.ChanID = 0                    mSPHelper!!.put("chanid", Constant.ChanID.toString())                }                false            } else {                if (Constant.ChanID == Constant.ChanM) {                    Constant.ChanF = 1                    mSPHelper!!.put("chanf", Constant.ChanF.toString())                    Constant.ChanID = 0                    mSPHelper!!.put("chanid", Constant.ChanID.toString())                }                true            }        } else {            false        }    }    fun inChecChan() {        var chanid = mSPHelper!!.get("chanid", "") as String        if (chanid == "") {            val ct = mDOpe!!.OperaDatabase(DCon.Chanqueryct, "0") as Long            if (ct == Constant.ChanM.toLong()) {                chanid = "0"                mSPHelper!!.put("chanid", chanid)            } else {                chanid = ct.toString()                mSPHelper!!.put("chanid", chanid)            }        }        Constant.ChanID = chanid.toInt()        var chanf = mSPHelper!!.get("chanf", "") as String        if (chanf == "") {            val RecordCount = mDOpe!!.OperaDatabase(DCon.Chanqueryct, "0") as Long            if (RecordCount == Constant.ChanM.toLong()) {                chanf = "1"                Constant.ChanF = chanf.toInt()                mSPHelper!!.put("chanf", chanf)            } else {                chanf = "0"                Constant.ChanF = chanf.toInt()                mSPHelper!!.put("chanf", chanf)            }        }        Constant.ChanF = chanf.toInt()        if (Constant.ChanF == 0) {            if (Constant.ChanID >= 1) {                val mChan =                    mDOpe!!.OperaDatabase(DCon.Chanqueryrow, Constant.ChanID) as Chan                if (mChan == null) {                    Constant.ChanID--                }            }            Constant.ChanID++            mSPHelper!!.put("chanid", Constant.ChanID.toString())        } else {            Constant.ChanID++            mSPHelper!!.put("chanid", Constant.ChanID.toString())        }    }    override fun Pergran(requestCode: Int) {        super.Pergran(requestCode)        when(requestCode){            PeUtil.STORAGE->{                Send(Constant.TOINIT, "")                var hasPermission1:Boolean= PeUtil.hasPermission(this@MainActivity,Manifest.permission.CAMERA)                if(!hasPermission1){                    PeUtil.requestPer(this@MainActivity, PeUtil.CAMERA)                }            }            PeUtil.CAMERA->{                var hasPermission2:Boolean= PeUtil.hasPermission(this@MainActivity,Manifest.permission.RECORD_AUDIO)                if(!hasPermission2){                    PeUtil.requestPer(this@MainActivity, PeUtil.RECORDAUDIO)                }            }            PeUtil.RECORDAUDIO->{                mBasicSettingsFragment!!.mHandler.sendEmptyMessage(Constant.OPENCAMERA);                var hasPermission3:Boolean= PeUtil.hasPermission(this@MainActivity,Manifest.permission.INTERNET)                if(!hasPermission3){                    PeUtil.requestPer(this@MainActivity, PeUtil.INTERNET)                }            }        }    }    override fun Perteden(v: String) {        super.Perteden(v)    }    override fun Perpeden(v: String) {        super.Perpeden(v)    }    override fun onStart() {        super.onStart()    }    override fun onRestart() {        super.onRestart()    }    override fun onResume() {        super.onResume()    }    override fun onPause() {        super.onPause()    }    override fun onStop() {        super.onStop()    }    override fun onDestroy() {        super.onDestroy()        EventBus.getDefault().unregister(this)    }    fun Dir() {        Thread {            mSPHelper = SPHelper.instance(this@MainActivity)            mDOpe = DOpe.Instance(                this@MainActivity,                this@MainActivity.getExternalFilesDir(null)!!.getAbsolutePath() + File.separator + Constant.DIR            )            Constant.Root = mSPHelper?.get(Constant.ROOT, "") as String?            if (Constant.Root.equals("")) {                Constant.Root = this@MainActivity.getExternalFilesDir(null)!!.getAbsolutePath() + File.separator + Constant.DIR                mSPHelper?.put(Constant.ROOT, Constant.Root)                val rootdir: File = File(Constant.Root)                if (!rootdir.exists()) {                    rootdir.mkdirs()                }            }            Constant.de =mSPHelper?.get(Constant.DE, "") as String?            if (Constant.de.equals("")) {                Constant.de = Constant.Root.toString() + "/de"                mSPHelper?.put(Constant.DE, Constant.de)                val ddir: File = File(Constant.de)                if (!ddir.exists()) {                     ddir.mkdirs()                }            }            try {                Thread.sleep(200)            } catch (e: Exception) {                Log.e(TAG, "Exception  $e")            }            Send(Constant.DATA, "")        }.start()    }    fun Send(args: Int, info: String?) {        val msg = Message()        msg.what = args        msg.obj = info        mHandler.sendMessage(msg)    }    @Subscribe(threadMode = ThreadMode.MAIN)    open fun onEvent(eventBase: Any?) {        if (eventBase is StartRecord) {        } else if (eventBase is StopRecord) {        } else if (eventBase is PushCallback) {            PushCallback(eventBase as PushCallback)        }    }    fun PushCallback(mPushCallback: PushCallback) {       Toast.makeText(this@MainActivity, mPushCallback!!.name, Toast.LENGTH_LONG).show()    }    fun getSPHelper():SPHelper?{        if(mSPHelper==null){            mSPHelper = SPHelper.instance(this@MainActivity)        }        return mSPHelper!!    }}